// Code generated by protoc-gen-go. DO NOT EDIT.
// source: route.proto

package route

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TestRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestRequest) Reset()         { *m = TestRequest{} }
func (m *TestRequest) String() string { return proto.CompactTextString(m) }
func (*TestRequest) ProtoMessage()    {}
func (*TestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0984d49a362b6b9f, []int{0}
}

func (m *TestRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestRequest.Unmarshal(m, b)
}
func (m *TestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestRequest.Marshal(b, m, deterministic)
}
func (m *TestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestRequest.Merge(m, src)
}
func (m *TestRequest) XXX_Size() int {
	return xxx_messageInfo_TestRequest.Size(m)
}
func (m *TestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TestRequest proto.InternalMessageInfo

func (m *TestRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type TestResponse struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestResponse) Reset()         { *m = TestResponse{} }
func (m *TestResponse) String() string { return proto.CompactTextString(m) }
func (*TestResponse) ProtoMessage()    {}
func (*TestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0984d49a362b6b9f, []int{1}
}

func (m *TestResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestResponse.Unmarshal(m, b)
}
func (m *TestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestResponse.Marshal(b, m, deterministic)
}
func (m *TestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestResponse.Merge(m, src)
}
func (m *TestResponse) XXX_Size() int {
	return xxx_messageInfo_TestResponse.Size(m)
}
func (m *TestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TestResponse proto.InternalMessageInfo

func (m *TestResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*TestRequest)(nil), "TestRequest")
	proto.RegisterType((*TestResponse)(nil), "TestResponse")
}

func init() { proto.RegisterFile("route.proto", fileDescriptor_0984d49a362b6b9f) }

var fileDescriptor_0984d49a362b6b9f = []byte{
	// 140 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0xca, 0x2f, 0x2d,
	0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x52, 0xe4, 0xe2, 0x0e, 0x49, 0x2d, 0x2e, 0x09,
	0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe2, 0x62, 0xc9, 0x4b, 0xcc, 0x4d, 0x95, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95, 0x14, 0xb8, 0x78, 0x20, 0x4a, 0x8a, 0x0b, 0xf2,
	0xf3, 0x8a, 0x53, 0x85, 0x04, 0xb8, 0x98, 0x73, 0x8b, 0xd3, 0xa1, 0x4a, 0x40, 0x4c, 0x23, 0x3b,
	0x2e, 0x76, 0xdf, 0xca, 0x20, 0x90, 0xa9, 0x42, 0xc6, 0x5c, 0x42, 0xc1, 0x89, 0x95, 0x1e, 0xa9,
	0x39, 0x39, 0xf9, 0x21, 0xf9, 0x21, 0x19, 0xa9, 0xe1, 0xf9, 0x45, 0x39, 0x29, 0x42, 0x3c, 0x7a,
	0x48, 0x96, 0x48, 0xf1, 0xea, 0x21, 0x9b, 0xa7, 0xc4, 0x90, 0xc4, 0x06, 0x76, 0x8b, 0x31, 0x20,
	0x00, 0x00, 0xff, 0xff, 0x72, 0xdc, 0x05, 0x9e, 0x9a, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MyRouteClient is the client API for MyRoute service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MyRouteClient interface {
	SayHelloToTheWorld(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
}

type myRouteClient struct {
	cc *grpc.ClientConn
}

func NewMyRouteClient(cc *grpc.ClientConn) MyRouteClient {
	return &myRouteClient{cc}
}

func (c *myRouteClient) SayHelloToTheWorld(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/MyRoute/SayHelloToTheWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyRouteServer is the server API for MyRoute service.
type MyRouteServer interface {
	SayHelloToTheWorld(context.Context, *TestRequest) (*TestResponse, error)
}

// UnimplementedMyRouteServer can be embedded to have forward compatible implementations.
type UnimplementedMyRouteServer struct {
}

func (*UnimplementedMyRouteServer) SayHelloToTheWorld(ctx context.Context, req *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHelloToTheWorld not implemented")
}

func RegisterMyRouteServer(s *grpc.Server, srv MyRouteServer) {
	s.RegisterService(&_MyRoute_serviceDesc, srv)
}

func _MyRoute_SayHelloToTheWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyRouteServer).SayHelloToTheWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MyRoute/SayHelloToTheWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyRouteServer).SayHelloToTheWorld(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MyRoute_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MyRoute",
	HandlerType: (*MyRouteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHelloToTheWorld",
			Handler:    _MyRoute_SayHelloToTheWorld_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "route.proto",
}

package main

import (
	pb "../proto"
	"./service"
	"./dbworker"

	"context"
	"fmt"
	"net"
	"net/http"
	"log"
	"time"
	"google.golang.org/grpc"
	"github.com/go-pg/pg"
	grpc_runtime "github.com/grpc-ecosystem/grpc-gateway/runtime"
)


func main() {
	grpcAddress := "localhost:5001"
	httpAddress := "localhost:5002"

	fmt.Printf("Connecting into DB\n")
	// Connect to PostgresQL
	db := pg.Connect(&pg.Options{
		User:                  "postgres",
		Password:              "example",
		Database:              "todo",
		Addr:                  "localhost" + ":" + "5433",
		RetryStatementTimeout: true,
		MaxRetries:            4,
		MinRetryBackoff:       250 * time.Millisecond,
	})
	// Create Table from Todo struct generated by gRPC
	db.CreateTable(&pb.Todo{}, nil)
	
	s := grpc.NewServer()
	todoDBWorker := dbworker.ToDoImpl{DB: db}
	pb.RegisterTodoServiceServer(s, &service.Server{
		ToDoDBWorker: todoDBWorker,
	})

	lis, err := net.Listen("tcp", grpcAddress)
	if err != nil {
		log.Fatalf("can not listen tcp grpcAddress %s: %v", grpcAddress, err)
	}

	fmt.Printf("Serving GRPC at %s.\n", grpcAddress)
	go s.Serve(lis)
	// if err := ; err != nil {
	// 	log.Fatalf("failed to serve: %v", err)
	// }


	conn, err := grpc.Dial(grpcAddress, grpc.WithInsecure())
	if err != nil {
		panic("Couldn't contact grpc server")
	}

	mux := grpc_runtime.NewServeMux()
	err = pb.RegisterTodoServiceHandler(context.Background(), mux, conn)
	if err != nil {
		panic("Cannot serve http api")
	}
	fmt.Printf("Serving http at %s.\n", httpAddress)
	http.ListenAndServe(httpAddress, mux)
}
